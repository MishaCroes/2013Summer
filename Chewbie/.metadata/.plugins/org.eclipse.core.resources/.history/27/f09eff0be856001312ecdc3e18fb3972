package me.xiangchen.app.chewbie;

import me.xiangchen.ml.EngagementClassifier;
import me.xiangchen.ml.xacFeatureMaker;
import android.content.Context;
import android.graphics.Bitmap;
import android.graphics.Canvas;
import android.graphics.Color;
import android.util.Log;
import android.view.Gravity;
import android.widget.RelativeLayout;
import android.widget.TextView;

import com.sonyericsson.extras.liveware.aef.control.Control;
import com.sonyericsson.extras.liveware.aef.sensor.Sensor;
import com.sonyericsson.extras.liveware.extension.util.control.ControlExtension;
import com.sonyericsson.extras.liveware.extension.util.control.ControlTouchEvent;
import com.sonyericsson.extras.liveware.extension.util.sensor.AccessorySensor;
import com.sonyericsson.extras.liveware.extension.util.sensor.AccessorySensorEvent;
import com.sonyericsson.extras.liveware.extension.util.sensor.AccessorySensorEventListener;
import com.sonyericsson.extras.liveware.extension.util.sensor.AccessorySensorException;
import com.sonyericsson.extras.liveware.extension.util.sensor.AccessorySensorManager;

public class ChewbieExtension extends ControlExtension {

	public final static int WATCHACCELFPS = 10;
	public String LOGTAG = "Chewbie";
	int width;
	int height;
	
	RelativeLayout layout;
	Canvas canvas;
	Bitmap bitmap;
	TextView textView;
	
	AccessorySensor sensor = null;
	AccessorySensorEventListener listener;
	
	public ChewbieExtension(Context context, String hostAppPackageName) {
		super(context, hostAppPackageName);
		
		width = getSupportedControlWidth(context);
		height = getSupportedControlHeight(context);
		
		layout = new RelativeLayout(context);
		textView = new TextView(context);
		textView.setText("Hello watch!");
		textView.setTextSize(8);
		textView.setGravity(Gravity.CENTER);
		textView.setTextColor(Color.WHITE);
		textView.layout(0, 0, width, height);
		layout.addView(textView);
		
		AccessorySensorManager manager = new AccessorySensorManager(context,
				hostAppPackageName);
		sensor = manager.getSensor(Sensor.SENSOR_TYPE_ACCELEROMETER);

		listener = new AccessorySensorEventListener() {

			public void onSensorEvent(AccessorySensorEvent sensorEvent) {
				float[] values = sensorEvent.getSensorValues();
				xacFeatureMaker.updateWatchAccel(values);
				xacFeatureMaker.addWatchFeatureEntry();
				
				if(ChewbieTrainer.isRecognition) {
					ChewbieTrainer.mode  = doClassification(WATCHACCELFPS);
					updateVisual();
				}
			}
		};
	}
	
	@Override
	public void onResume() {
		setScreenState(Control.Intents.SCREEN_STATE_ON);

		// Start listening for sensor updates.
		if (sensor != null) {
			try {
				sensor.registerFixedRateListener(listener,
						Sensor.SensorRates.SENSOR_DELAY_FASTEST);
			} catch (AccessorySensorException e) {
				Log.d(LOGTAG, "Failed to register listener");
			}
		}
	}
	
	@Override
	public void onTouch(final ControlTouchEvent event) {
		if(!ChewbieTrainer.isRecognition) {
			int action = event.getAction();
			if(action == Control.Intents.TOUCH_ACTION_PRESS) {
				startVibrator(100, 0, 1);
				xacFeatureMaker.sendOffData(WATCHACCELFPS, ChewbieTrainer.strModes);
				updateVisual();
			}
		}
	}
	
	private void updateVisual() {

		textView.setText(ChewbieTrainer.strModes[ChewbieTrainer.mode]);
		bitmap = Bitmap.createBitmap(width, height, Bitmap.Config.ARGB_8888);
		canvas = new Canvas(bitmap);
		layout.draw(canvas);

		showBitmap(bitmap);
	}
	
	private int doClassification(int n) {
		int idxClass = 0;
		Object[] features = xacFeatureMaker.getFlattenedData(n);
		if (features != null) {
			try {
				idxClass = (int) EngagementClassifier.classify(features);
			} catch (Exception e) {
				// TODO Auto-generated catch block
				e.printStackTrace();
			}
		}

		switch (idxClass) {
		case 0:
			return ChewbieTrainer.VIEWING;
		case 1:
			return ChewbieTrainer.PERIPHERAL;
		case 2:
			return ChewbieTrainer.INATTENTIVE;

		}

		return ChewbieTrainer.UNKNOWN;
	}
	
	public static int getSupportedControlWidth(Context context) {
		return context.getResources().getDimensionPixelSize(
				R.dimen.smart_watch_control_width);
	}

	public static int getSupportedControlHeight(Context context) {
		return context.getResources().getDimensionPixelSize(
				R.dimen.smart_watch_control_height);
	}

}
